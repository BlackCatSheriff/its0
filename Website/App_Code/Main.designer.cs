#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18046
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Main")]
public partial class MainDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region 可扩展性方法定义
  partial void OnCreated();
  partial void InsertArticle(Article instance);
  partial void UpdateArticle(Article instance);
  partial void DeleteArticle(Article instance);
  partial void InsertArticleCategory(ArticleCategory instance);
  partial void UpdateArticleCategory(ArticleCategory instance);
  partial void DeleteArticleCategory(ArticleCategory instance);
  partial void InsertUserPermission(UserPermission instance);
  partial void UpdateUserPermission(UserPermission instance);
  partial void DeleteUserPermission(UserPermission instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertLog(Log instance);
  partial void UpdateLog(Log instance);
  partial void DeleteLog(Log instance);
  #endregion
	
	public MainDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Main"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public MainDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MainDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MainDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MainDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Article> Article
	{
		get
		{
			return this.GetTable<Article>();
		}
	}
	
	public System.Data.Linq.Table<ArticleCategory> ArticleCategory
	{
		get
		{
			return this.GetTable<ArticleCategory>();
		}
	}
	
	public System.Data.Linq.Table<UserPermission> UserPermission
	{
		get
		{
			return this.GetTable<UserPermission>();
		}
	}
	
	public System.Data.Linq.Table<User> User
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<Log> Log
	{
		get
		{
			return this.GetTable<Log>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Article")]
public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _PublisherID;
	
	private int _CategoryID;
	
	private string _Title;
	
	private string _From;
	
	private string _Content;
	
	private System.DateTime _PostDate;
	
	private System.DateTime _EditDate;
	
	private int _ViewCount;
	
	private bool _IsTop;
	
	private bool _IsRecommend;
	
	private bool _IsHide;
	
	private EntityRef<ArticleCategory> _Category;
	
	private EntityRef<User> _Publisher;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPublisherIDChanging(int value);
    partial void OnPublisherIDChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnFromChanging(string value);
    partial void OnFromChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnPostDateChanging(System.DateTime value);
    partial void OnPostDateChanged();
    partial void OnEditDateChanging(System.DateTime value);
    partial void OnEditDateChanged();
    partial void OnViewCountChanging(int value);
    partial void OnViewCountChanged();
    partial void OnIsTopChanging(bool value);
    partial void OnIsTopChanged();
    partial void OnIsRecommendChanging(bool value);
    partial void OnIsRecommendChanged();
    partial void OnIsHideChanging(bool value);
    partial void OnIsHideChanged();
    #endregion
	
	public Article()
	{
		this._Category = default(EntityRef<ArticleCategory>);
		this._Publisher = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublisherID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int PublisherID
	{
		get
		{
			return this._PublisherID;
		}
		set
		{
			if ((this._PublisherID != value))
			{
				if (this._Publisher.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPublisherIDChanging(value);
				this.SendPropertyChanging();
				this._PublisherID = value;
				this.SendPropertyChanged("PublisherID");
				this.OnPublisherIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int CategoryID
	{
		get
		{
			return this._CategoryID;
		}
		set
		{
			if ((this._CategoryID != value))
			{
				if (this._Category.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCategoryIDChanging(value);
				this.SendPropertyChanging();
				this._CategoryID = value;
				this.SendPropertyChanged("CategoryID");
				this.OnCategoryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string From
	{
		get
		{
			return this._From;
		}
		set
		{
			if ((this._From != value))
			{
				this.OnFromChanging(value);
				this.SendPropertyChanging();
				this._From = value;
				this.SendPropertyChanged("From");
				this.OnFromChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Content
	{
		get
		{
			return this._Content;
		}
		set
		{
			if ((this._Content != value))
			{
				this.OnContentChanging(value);
				this.SendPropertyChanging();
				this._Content = value;
				this.SendPropertyChanged("Content");
				this.OnContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime PostDate
	{
		get
		{
			return this._PostDate;
		}
		set
		{
			if ((this._PostDate != value))
			{
				this.OnPostDateChanging(value);
				this.SendPropertyChanging();
				this._PostDate = value;
				this.SendPropertyChanged("PostDate");
				this.OnPostDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime EditDate
	{
		get
		{
			return this._EditDate;
		}
		set
		{
			if ((this._EditDate != value))
			{
				this.OnEditDateChanging(value);
				this.SendPropertyChanging();
				this._EditDate = value;
				this.SendPropertyChanged("EditDate");
				this.OnEditDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewCount", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int ViewCount
	{
		get
		{
			return this._ViewCount;
		}
		set
		{
			if ((this._ViewCount != value))
			{
				this.OnViewCountChanging(value);
				this.SendPropertyChanging();
				this._ViewCount = value;
				this.SendPropertyChanged("ViewCount");
				this.OnViewCountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTop", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public bool IsTop
	{
		get
		{
			return this._IsTop;
		}
		set
		{
			if ((this._IsTop != value))
			{
				this.OnIsTopChanging(value);
				this.SendPropertyChanging();
				this._IsTop = value;
				this.SendPropertyChanged("IsTop");
				this.OnIsTopChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRecommend", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public bool IsRecommend
	{
		get
		{
			return this._IsRecommend;
		}
		set
		{
			if ((this._IsRecommend != value))
			{
				this.OnIsRecommendChanging(value);
				this.SendPropertyChanging();
				this._IsRecommend = value;
				this.SendPropertyChanged("IsRecommend");
				this.OnIsRecommendChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHide", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public bool IsHide
	{
		get
		{
			return this._IsHide;
		}
		set
		{
			if ((this._IsHide != value))
			{
				this.OnIsHideChanging(value);
				this.SendPropertyChanging();
				this._IsHide = value;
				this.SendPropertyChanged("IsHide");
				this.OnIsHideChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArticleCategory_Article", Storage="_Category", ThisKey="CategoryID", OtherKey="ID", IsForeignKey=true)]
	public ArticleCategory Category
	{
		get
		{
			return this._Category.Entity;
		}
		set
		{
			ArticleCategory previousValue = this._Category.Entity;
			if (((previousValue != value) 
						|| (this._Category.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Category.Entity = null;
					previousValue.Article.Remove(this);
				}
				this._Category.Entity = value;
				if ((value != null))
				{
					value.Article.Add(this);
					this._CategoryID = value.ID;
				}
				else
				{
					this._CategoryID = default(int);
				}
				this.SendPropertyChanged("Category");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Article", Storage="_Publisher", ThisKey="PublisherID", OtherKey="ID", IsForeignKey=true)]
	public User Publisher
	{
		get
		{
			return this._Publisher.Entity;
		}
		set
		{
			User previousValue = this._Publisher.Entity;
			if (((previousValue != value) 
						|| (this._Publisher.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Publisher.Entity = null;
					previousValue.Article.Remove(this);
				}
				this._Publisher.Entity = value;
				if ((value != null))
				{
					value.Article.Add(this);
					this._PublisherID = value.ID;
				}
				else
				{
					this._PublisherID = default(int);
				}
				this.SendPropertyChanged("Publisher");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArticleCategory")]
public partial class ArticleCategory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private EntitySet<Article> _Article;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public ArticleCategory()
	{
		this._Article = new EntitySet<Article>(new Action<Article>(this.attach_Article), new Action<Article>(this.detach_Article));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArticleCategory_Article", Storage="_Article", ThisKey="ID", OtherKey="CategoryID")]
	public EntitySet<Article> Article
	{
		get
		{
			return this._Article;
		}
		set
		{
			this._Article.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Article(Article entity)
	{
		this.SendPropertyChanging();
		entity.Category = this;
	}
	
	private void detach_Article(Article entity)
	{
		this.SendPropertyChanging();
		entity.Category = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPermission")]
public partial class UserPermission : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private bool _Article;
	
	private bool _User;
	
	private EntitySet<User> _User1;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnArticleChanging(bool value);
    partial void OnArticleChanged();
    partial void OnUserChanging(bool value);
    partial void OnUserChanged();
    #endregion
	
	public UserPermission()
	{
		this._User1 = new EntitySet<User>(new Action<User>(this.attach_User1), new Action<User>(this.detach_User1));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Article", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public bool Article
	{
		get
		{
			return this._Article;
		}
		set
		{
			if ((this._Article != value))
			{
				this.OnArticleChanging(value);
				this.SendPropertyChanging();
				this._Article = value;
				this.SendPropertyChanged("Article");
				this.OnArticleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User]", Storage="_User", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public bool User
	{
		get
		{
			return this._User;
		}
		set
		{
			if ((this._User != value))
			{
				this.OnUserChanging(value);
				this.SendPropertyChanging();
				this._User = value;
				this.SendPropertyChanged("User");
				this.OnUserChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserPermission_User", Storage="_User1", ThisKey="ID", OtherKey="PermissionID")]
	public EntitySet<User> User_
	{
		get
		{
			return this._User1;
		}
		set
		{
			this._User1.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_User1(User entity)
	{
		this.SendPropertyChanging();
		entity.Permission = this;
	}
	
	private void detach_User1(User entity)
	{
		this.SendPropertyChanging();
		entity.Permission = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _Password;
	
	private string _PasswordSalt;
	
	private int _PermissionID;
	
	private EntitySet<Article> _Article;
	
	private EntityRef<UserPermission> _Permission;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    #endregion
	
	public User()
	{
		this._Article = new EntitySet<Article>(new Action<Article>(this.attach_Article), new Action<Article>(this.detach_Article));
		this._Permission = default(EntityRef<UserPermission>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NChar(40) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NChar(32) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string PasswordSalt
	{
		get
		{
			return this._PasswordSalt;
		}
		set
		{
			if ((this._PasswordSalt != value))
			{
				this.OnPasswordSaltChanging(value);
				this.SendPropertyChanging();
				this._PasswordSalt = value;
				this.SendPropertyChanged("PasswordSalt");
				this.OnPasswordSaltChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int PermissionID
	{
		get
		{
			return this._PermissionID;
		}
		set
		{
			if ((this._PermissionID != value))
			{
				if (this._Permission.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPermissionIDChanging(value);
				this.SendPropertyChanging();
				this._PermissionID = value;
				this.SendPropertyChanged("PermissionID");
				this.OnPermissionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Article", Storage="_Article", ThisKey="ID", OtherKey="PublisherID")]
	public EntitySet<Article> Article
	{
		get
		{
			return this._Article;
		}
		set
		{
			this._Article.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserPermission_User", Storage="_Permission", ThisKey="PermissionID", OtherKey="ID", IsForeignKey=true)]
	public UserPermission Permission
	{
		get
		{
			return this._Permission.Entity;
		}
		set
		{
			UserPermission previousValue = this._Permission.Entity;
			if (((previousValue != value) 
						|| (this._Permission.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Permission.Entity = null;
					previousValue.User_.Remove(this);
				}
				this._Permission.Entity = value;
				if ((value != null))
				{
					value.User_.Add(this);
					this._PermissionID = value.ID;
				}
				else
				{
					this._PermissionID = default(int);
				}
				this.SendPropertyChanged("Permission");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Article(Article entity)
	{
		this.SendPropertyChanging();
		entity.Publisher = this;
	}
	
	private void detach_Article(Article entity)
	{
		this.SendPropertyChanging();
		entity.Publisher = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Log]")]
public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _UserID;
	
	private int _TargetID;
	
	private string _TargetType;
	
	private string _Description;
	
	private System.DateTime _Time;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTargetIDChanging(int value);
    partial void OnTargetIDChanged();
    partial void OnTargetTypeChanging(string value);
    partial void OnTargetTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    #endregion
	
	public Log()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetID", DbType="Int NOT NULL")]
	public int TargetID
	{
		get
		{
			return this._TargetID;
		}
		set
		{
			if ((this._TargetID != value))
			{
				this.OnTargetIDChanging(value);
				this.SendPropertyChanging();
				this._TargetID = value;
				this.SendPropertyChanged("TargetID");
				this.OnTargetIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string TargetType
	{
		get
		{
			return this._TargetType;
		}
		set
		{
			if ((this._TargetType != value))
			{
				this.OnTargetTypeChanging(value);
				this.SendPropertyChanging();
				this._TargetType = value;
				this.SendPropertyChanged("TargetType");
				this.OnTargetTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
	public System.DateTime Time
	{
		get
		{
			return this._Time;
		}
		set
		{
			if ((this._Time != value))
			{
				this.OnTimeChanging(value);
				this.SendPropertyChanging();
				this._Time = value;
				this.SendPropertyChanged("Time");
				this.OnTimeChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
